"""A script that moves all scatter plots and histograms generated by the search to centralized locations in the pwd."""
import glob
import os
import shutil
import sys

# Adds grandparent directory to sys.path. Necessary to make the import below work when running this file as a script
grandparent_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
if grandparent_dir not in sys.path:
    sys.path.insert(0, grandparent_dir)

import tgfsearch.parameters as params
import tgfsearch.tools as tl


def main():
    if len(sys.argv) >= 4:
        first_date = str(sys.argv[1])
        second_date = str(sys.argv[2])
        unit = str(sys.argv[3]).upper()
    else:
        print('Please provide a first date, a second date, and a unit name.')
        exit()

    # Makes sure inputs are valid
    if not first_date.isdigit() or not second_date.isdigit() \
            or len(first_date) != 6 or len(second_date) != 6:
        print('Invalid date(s).')
        exit()
    elif int(second_date) < int(first_date):
        print('Not a valid date range.')
        exit()

    if len(sys.argv) > 4:
        mode_info = sys.argv[4:]
    else:
        mode_info = []

    results_loc = os.getcwd()
    export_loc = os.getcwd()
    # Flag for Using custom import/export directories
    if '-c' in mode_info:
        index = mode_info.index('-c')
        if index + 2 < len(mode_info):
            results_index = index + 1
            if mode_info[results_index] != 'none' and mode_info[results_index] != '/':
                results_loc = mode_info[results_index]

            export_index = index + 2
            if mode_info[export_index] != 'none' and mode_info[export_index] != '/':
                export_loc = mode_info[export_index]

    detector_path = f'{results_loc}/Results/{unit}'
    export_path = f'{export_loc}/collected_images'

    # Flag for only including short events above or equal to a certain rank
    top_only = False
    max_rank = 0
    max_rank_order = 0
    rank_len = 0
    padding_len = 0
    if '-t' in mode_info:
        index = mode_info.index('-t')
        # Default argument (top-ranked plots only)
        if index + 1 >= len(mode_info):
            max_rank = 1
            max_rank_order = 1
            top_only = True
        else:
            if not mode_info[index + 1].isnumeric():
                print('Error: ranking argument must be a positive integer.')
                exit()

            max_rank = int(mode_info[index + 1])
            if max_rank < 0:
                print('Error: ranking argument must be a positive integer')
                exit()

            max_rank_order = len(mode_info[index + 1])
            top_only = True

        rank_len = len(str(params.MAX_PLOTS_PER_SCINT))
        padding_len = rank_len - max_rank_order

    # For the traces
    trace_path = f'{export_path}/traces'
    tl.make_path(trace_path)

    # For the scatter plots
    short_event_path = f'{export_path}/scatter_plots'
    tl.make_path(short_event_path)

    # For the histograms
    short_hist_path = f'{export_path}/histograms/{params.SHORT_BIN_SIZE}_sec_bins'
    tl.make_path(short_hist_path)
    long_hist_path = f'{export_path}/histograms/{params.LONG_BIN_SIZE}_sec_bins'
    tl.make_path(long_hist_path)

    requested_dates = tl.make_date_list(first_date, second_date)
    for date_str in requested_dates:
        path = f'{detector_path}/{date_str}'

        # Traces
        trace_list = glob.glob(f'{path}/traces/*xtr*.png')
        for trace in trace_list:
            t_filename = trace.split('/')[-1].split('\\')[-1]
            shutil.copyfile(trace, f'{trace_path}/{t_filename}')

        # Scatter plots:
        if top_only:
            maybe_plot_list = glob.glob(f'{path}/scatter_plots/'
                                        f'*_rank{"0" * padding_len}{"[0-9]" * max_rank_order}.png')
            scatter_plot_list = []
            for plot in maybe_plot_list:
                rank_index = plot.find('rank') + 4
                rank = int(plot[rank_index: rank_index + rank_len])
                if rank <= max_rank:
                    scatter_plot_list.append(plot)

        else:
            scatter_plot_list = glob.glob(f'{path}/scatter_plots/*.png')

        for plot in scatter_plot_list:
            s_filename = plot.split('/')[-1].split('\\')[-1]
            shutil.copyfile(plot, f'{short_event_path}/{s_filename}')

        # Histograms
        short_hist_list = glob.glob(f'{path}/*histogram_{params.SHORT_BIN_SIZE}_sec_bins.png')
        for hist in short_hist_list:
            hist_filename = hist.split('/')[-1].split('\\')[-1]
            shutil.copyfile(hist, f'{short_hist_path}/{hist_filename}')

        long_hist_list = glob.glob(f'{path}/*histogram_{params.LONG_BIN_SIZE}_sec_bins.png')
        for hist in long_hist_list:
            hist_filename = hist.split('/')[-1].split('\\')[-1]
            shutil.copyfile(hist, f'{long_hist_path}/{hist_filename}')


if __name__ == '__main__':
    main()
