"""A class used to keep track of and process long events."""
import numpy as np

import parameters as params


class LongEvent:
    """Object used to store all relevant information about long events.

    Parameters
    ----------
    start : int
        The index of the histogram bin which corresponds to the start of the event.
    length : int
        The number of histogram bins which make up an event.
    z_scores : list
        A list containing the z-scores for each bin in the daily histogram.
    day_bins : np.array
        An array containing the bins for the daily histogram.

    Attributes
    ----------
    start : int
        The index of the histogram bin which corresponds to the start of the event.
    length : int
        The number of histogram bins which make up an event.
    stop : int
        The index of the histogram bin which corresponds to the end of the event.
    peak_index : int
        The location of the bin with the largest z-score among all the bins comprising the event.
    highest_score : float
        The largest z-score in the event.
    start_sec : int
        The beginning of the event in seconds.
    stop_sec : int
        The end of the event in seconds.

    """

    def __init__(self, start, length, z_scores, day_bins):
        self.start = int(start)
        self.length = int(length)
        self.stop = int(start + length - 1) if self.length > 1 else int(start + length)
        self.peak_index = 0
        self.highest_score = self._highest_zscore(z_scores)
        self.start_sec, self.stop_sec = self._beginning_and_end_seconds(day_bins)

    # String casting magic method
    def __str__(self):
        return f'Long event at index {self.start}'

    # Debugging string magic method
    def __repr__(self):
        return f'Long event; start:{self.start}; stop:{self.stop}; length:{self.length}'

    def _highest_zscore(self, z_scores):
        """Identifies the highest z-score and its corresponding bin for the event."""
        glow_scores = z_scores[self.start:self.stop]
        highest_score = np.max(glow_scores)
        self.peak_index = np.argmax(glow_scores) + self.start
        return highest_score

    def _beginning_and_end_seconds(self, day_bins):
        """Calculates the beginning and end of an event in seconds."""
        glow_times = day_bins[self.start:self.stop]
        first_sec = glow_times[0]
        length = self.length * params.BIN_SIZE
        last_sec = first_sec + length
        return first_sec, last_sec

    def make_hist_subplot(self, ax, day_bins, hist_allday, mue, sigma):
        """Makes the flagged z-score subplots for the long event search algorithm's full day histogram.

        The subplots generated by this function are meant to highlight the four most interesting-looking long events
        for a given day.

        Parameters
        ----------
        ax : plt.ax
            The pyplot axis object that the subplot is going to be generated for.
        day_bins : np.array
            The numpy array specifying the bins used to make the histogram.
        hist_allday : np.array
            The numpy array containing the counts per time bin.
        mue : np.array
            The average count rates expected at each bin (constant for non-aircraft mode).
        sigma : np.array
            The standard deviation of each bin's expected average (constant for non-aircraft mode).

        """
        padding = 20
        c = 0 if (self.peak_index - padding) < 0 else (self.peak_index - padding)
        d = (len(day_bins) - 2) if (self.peak_index + padding) > (len(day_bins) - 2) else (self.peak_index + padding)

        subbins = day_bins[c:d]
        subhist = hist_allday[c:d]
        submue = mue[c:d]
        subsigma = sigma[c:d]
        ax.bar(subbins, subhist, alpha=0.5, color='c', width=params.BIN_SIZE)
        ax.set_xlabel('Seconds of Day (UT)')
        ax.set_ylabel('Counts/bin')
        ax.plot(subbins, submue + params.FLAG_THRESH * subsigma, color='blue', linestyle='dashed', linewidth=2)
        ax.grid(True)
