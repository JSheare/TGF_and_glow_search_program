import glob
import os
import shutil
import sys
import search_module as sm

# Moves all scatter plots and histograms generated by search.py to centralized locations

# Defining all these keeps my IDE from screaming at me
detector = ''
year_int = 0
year_int2 = 0
month_int = 0
month_int2 = 0
day_int = 0
day_int2 = 0

try:
    # Establish dates from inputs 1 & 2
    input1 = str(sys.argv[1])
    year_int = int('20' + input1[:2])
    month_int = int(input1[2:4])
    day_int = int(input1[-2:])
    year_month = input1[:4]

    input2 = str(sys.argv[2])
    year_int2 = int('20' + input2[:2])
    month_int2 = int(input2[2:4])
    day_int2 = int(input2[-2:])
    year_month2 = input2[:4]

    # Input 3 is where the user specifies which set of detector data is desired
    detector = str(sys.argv[3])
except IndexError:
    print('Remember to specify the dates and detector!')
    exit()

s_path = f'{sm.results_loc()}/Collected Images/Scatter Plots/'
if not os.path.exists(s_path):
    os.makedirs(s_path)

h_path = f'{sm.results_loc()}/Collected Images/Histograms/'
if not os.path.exists(h_path):
    os.makedirs(h_path)

detector_path = f'{sm.results_loc()}/Results/{detector}/'

# Makes a dictionary of all the requested years, the requested months in each year,
# and the requested days in each month
requested_dates = {}
current_year = year_int
# For the years
while True:
    if current_year == year_int2:
        requested_dates.update({str(current_year): []})
        break
    else:
        requested_dates.update({str(current_year): []})
        current_year += 1

current_month = month_int
# For the months and days
for i in requested_dates:
    requested_months = []
    # For requested dates that are all in the same month
    if year_int == year_int2 and month_int == month_int2:
        requested_months.append([current_month, day_int, day_int2])
    # For everything else
    else:
        while True:
            if i == str(year_int) and current_month == month_int:
                requested_months.append([current_month, day_int, sm.days_per_month(current_month, int(i))])
                current_month += 1
            elif i == str(year_int2) and current_month == month_int2:
                requested_months.append([current_month, 1, day_int2])
                break
            elif current_month > 12:
                current_month = 1
                break
            else:
                requested_months.append([current_month, 1, sm.days_per_month(current_month, int(i))])
                current_month += 1

    current_month = 1
    requested_dates.update({i: requested_months})

for year in requested_dates:  # Loops over all requested years
    requested_months = requested_dates[year]
    YEAR_str = year
    for month in requested_months:  # Loops over each requested month of the given year
        MONTH_str = f'0{month[0]}' if len(str(month[0])) < 2 else str(month[0])
        day1 = month[1]
        day2 = month[2]
        for day in range(day1, day2+1):  # Loops over each requested day of the given month
            DAY_str = f'0{day}' if len(str(day)) < 2 else str(day)
            full_day_string = f'{YEAR_str[2:4]}{MONTH_str}{DAY_str}'  # In format yymmdd
            path = f'{detector_path}/{full_day_string}'

            # Scatter plots:
            scatter_plot_list = glob.glob(f'{path}/scatterplots/*event*.png')
            for s_file in scatter_plot_list:
                s_filename = s_file.replace(path, '')[14:]
                shutil.copyfile(s_file, f'{s_path}{s_filename}')

            # Histograms
            histogram_list = glob.glob(f'{path}/*histogram.png')
            for h_file in histogram_list:
                h_filename = h_file.replace(path, '')[1:]
                shutil.copyfile(h_file, f'{h_path}{h_filename}')
